{"version":3,"file":"SanityLiveStream.js","names":["comlink","comlinkSnapshot","children"],"sources":["../src/live/client-components/live-stream/SanityLiveStream.tsx"],"sourcesContent":["import {\n  type ClientPerspective,\n  type ContentSourceMap,\n  type InitializedClientConfig,\n  type QueryParams,\n} from '@sanity/client'\nimport {stegaEncodeSourceMap} from '@sanity/client/stega'\nimport type {LoaderControllerMsg} from '@sanity/presentation-comlink'\nimport {dequal} from 'dequal/lite'\nimport {use, useCallback, useEffect, useState, useSyncExternalStore} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {comlinkListeners, comlink as comlinkSnapshot} from '../../hooks/context'\n\n/**\n * @public\n */\nexport interface SanityLiveStreamProps\n  extends Pick<InitializedClientConfig, 'projectId' | 'dataset'> {\n  query: string\n  params?: QueryParams\n  perspective?: Exclude<ClientPerspective, 'raw'>\n  stega?: boolean\n  initial: Promise<React.ReactNode>\n  children: (result: {\n    data: unknown\n    sourceMap: ContentSourceMap | null\n    tags: string[]\n  }) => Promise<React.ReactNode>\n}\n\nconst LISTEN_HEARTBEAT_INTERVAL = 10_000\n\n/**\n * @public\n */\nexport default function SanityLiveStream(props: SanityLiveStreamProps): React.JSX.Element | null {\n  const {query, dataset, params = {}, perspective, projectId, stega} = props\n\n  const subscribe = useCallback((listener: () => void) => {\n    comlinkListeners.add(listener)\n    return () => comlinkListeners.delete(listener)\n  }, [])\n\n  const comlink = useSyncExternalStore(\n    subscribe,\n    () => comlinkSnapshot,\n    () => null,\n  )\n  const [children, setChildren] = useState<React.ReactNode | undefined>(undefined)\n\n  const handleQueryHeartbeat = useEffectEvent((comlink: NonNullable<typeof comlinkSnapshot>) => {\n    comlink.post('loader/query-listen', {\n      projectId: projectId!,\n      dataset: dataset!,\n      perspective: perspective! as ClientPerspective,\n      query,\n      params: params!,\n      heartbeat: LISTEN_HEARTBEAT_INTERVAL,\n    })\n  })\n  const handleQueryChange = useEffectEvent(\n    (event: Extract<LoaderControllerMsg, {type: 'loader/query-change'}>['data']) => {\n      if (\n        dequal(\n          {\n            projectId,\n            dataset,\n            query,\n            params,\n          },\n          {\n            projectId: event.projectId,\n            dataset: event.dataset,\n            query: event.query,\n            params: event.params,\n          },\n        )\n      ) {\n        const {result, resultSourceMap, tags} = event\n        const data = stega\n          ? stegaEncodeSourceMap(result, resultSourceMap, {enabled: true, studioUrl: '/'})\n          : result\n        // eslint-disable-next-line no-console\n        // console.log('server function streaming is disabled', {\n        //   startTransition,\n        //   setPromise,\n        //   data,\n        //   resultSourceMap,\n        //   tags,\n        // })\n        // console.log('rendering with server action')\n        // startTransition(() =>\n        //   setPromise(\n        //     props.children({\n        //       data,\n        //       sourceMap: resultSourceMap!,\n        //       tags: tags || [],\n        //     }) as Promise<React.JSX.Element>,\n        //   ),\n        // )\n        // eslint-disable-next-line no-console\n        console.groupCollapsed('rendering with server action')\n        ;(\n          props.children({\n            data,\n            sourceMap: resultSourceMap!,\n            tags: tags || [],\n          }) as Promise<React.JSX.Element>\n        )\n          .then(\n            (children) => {\n              // eslint-disable-next-line no-console\n              console.log('setChildren(children)')\n              // startTransition(() => setChildren(children))\n              setChildren(children)\n            },\n            (reason: unknown) => {\n              // eslint-disable-next-line no-console\n              console.error('rendering with server action: render children error', reason)\n            },\n          )\n          // eslint-disable-next-line no-console\n          .finally(() => console.groupEnd())\n      }\n    },\n  )\n  useEffect(() => {\n    if (!comlink) return\n\n    const unsubscribe = comlink.on('loader/query-change', handleQueryChange)\n    const interval = setInterval(() => handleQueryHeartbeat(comlink), LISTEN_HEARTBEAT_INTERVAL)\n    return () => {\n      clearInterval(interval)\n      unsubscribe()\n    }\n  }, [comlink])\n\n  if (!comlink || children === undefined) {\n    return use(props.initial) as React.JSX.Element\n  }\n\n  return <>{children}</>\n}\n"],"mappings":";;;;;;;AA8BA,MAAM,4BAA4B;AAKlC,SAAwB,iBAAiB,OAAwD;CAC/F,MAAM,EAAC,OAAO,SAAS,SAAS,EAAE,EAAE,aAAa,WAAW,UAAS;CAErE,MAAM,YAAY,aAAa,aAAyB;AACtD,mBAAiB,IAAI,SAAS;AAC9B,eAAa,iBAAiB,OAAO,SAAS;IAC7C,EAAE,CAAC;CAEN,MAAMA,YAAU,qBACd,iBACMC,eACA,KACP;CACD,MAAM,CAAC,UAAU,eAAe,SAAsC,KAAA,EAAU;CAEhF,MAAM,uBAAuB,gBAAgB,cAAiD;AAC5F,YAAQ,KAAK,uBAAuB;GACvB;GACF;GACI;GACb;GACQ;GACR,WAAW;GACZ,CAAC;GACF;CACF,MAAM,oBAAoB,gBACvB,UAA+E;AAC9E,MACE,OACE;GACE;GACA;GACA;GACA;GACD,EACD;GACE,WAAW,MAAM;GACjB,SAAS,MAAM;GACf,OAAO,MAAM;GACb,QAAQ,MAAM;GACf,CACF,EACD;GACA,MAAM,EAAC,QAAQ,iBAAiB,SAAQ;GACxC,MAAM,OAAO,QACT,qBAAqB,QAAQ,iBAAiB;IAAC,SAAS;IAAM,WAAW;IAAI,CAAC,GAC9E;AAoBJ,WAAQ,eAAe,+BAA+B;AAEpD,SAAM,SAAS;IACb;IACA,WAAW;IACX,MAAM,QAAQ,EAAE;IACjB,CAAC,CAED,MACE,eAAa;AAEZ,YAAQ,IAAI,wBAAwB;AAEpC,gBAAYC,WAAS;OAEtB,WAAoB;AAEnB,YAAQ,MAAM,uDAAuD,OAAO;KAE/E,CAEA,cAAc,QAAQ,UAAU,CAAC;;GAGzC;AACD,iBAAgB;AACd,MAAI,CAACF,UAAS;EAEd,MAAM,cAAcA,UAAQ,GAAG,uBAAuB,kBAAkB;EACxE,MAAM,WAAW,kBAAkB,qBAAqBA,UAAQ,EAAE,0BAA0B;AAC5F,eAAa;AACX,iBAAc,SAAS;AACvB,gBAAa;;IAEd,CAACA,UAAQ,CAAC;AAEb,KAAI,CAACA,aAAW,aAAa,KAAA,EAC3B,QAAO,IAAI,MAAM,QAAQ;AAG3B,QAAO,oBAAA,UAAA,EAAG,UAAA,CAAY"}