"use server";
import { sanitizePerspective } from "../../utils.js";
import { cookies, draftMode } from "next/headers";
import { perspectiveCookieName } from "@sanity/preview-url-secret/constants";
import { revalidateTag } from "next/cache";
async function revalidateSyncTags(tags) {
	await revalidateTag("sanity:fetch-sync-tags");
	for (const _tag of tags) {
		const tag = `sanity:${_tag}`;
		revalidateTag(tag);
		console.log(`<SanityLive /> revalidated tag: ${tag}`);
	}
}
async function setPerspectiveCookie(perspective) {
	if (!(await draftMode()).isEnabled) return;
	const sanitizedPerspective = sanitizePerspective(perspective, "drafts");
	if (perspective !== sanitizedPerspective) throw new Error(`Invalid perspective: ${perspective}`);
	(await cookies()).set(perspectiveCookieName, Array.isArray(sanitizedPerspective) ? sanitizedPerspective.join(",") : sanitizedPerspective, {
		httpOnly: true,
		path: "/",
		secure: true,
		sameSite: "none"
	});
}
export { revalidateSyncTags, setPerspectiveCookie };

//# sourceMappingURL=index.js.map