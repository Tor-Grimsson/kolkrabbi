{"version":3,"file":"index.js","names":[],"sources":["../../../src/live/server-actions/index.ts"],"sourcesContent":["'use server'\n\nimport type {ClientPerspective, SyncTag} from '@sanity/client'\nimport {perspectiveCookieName} from '@sanity/preview-url-secret/constants'\nimport {revalidateTag} from 'next/cache'\nimport {cookies, draftMode} from 'next/headers'\nimport {sanitizePerspective} from '../utils'\n\nexport async function revalidateSyncTags(tags: SyncTag[]): Promise<void> {\n  await revalidateTag('sanity:fetch-sync-tags')\n\n  for (const _tag of tags) {\n    const tag = `sanity:${_tag}`\n    revalidateTag(tag)\n    console.log(`<SanityLive /> revalidated tag: ${tag}`)\n  }\n}\n\nexport async function setPerspectiveCookie(perspective: ClientPerspective): Promise<void> {\n  if (!(await draftMode()).isEnabled) {\n    // throw new Error('Draft mode is not enabled, setting perspective cookie is not allowed')\n    return\n  }\n  const sanitizedPerspective = sanitizePerspective(perspective, 'drafts')\n  if (perspective !== sanitizedPerspective) {\n    throw new Error(`Invalid perspective: ${perspective}`)\n  }\n\n  ;(await cookies()).set(\n    perspectiveCookieName,\n    Array.isArray(sanitizedPerspective) ? sanitizedPerspective.join(',') : sanitizedPerspective,\n    {\n      httpOnly: true,\n      path: '/',\n      secure: true,\n      sameSite: 'none',\n    },\n  )\n}\n"],"mappings":";;;;;AAQA,eAAsB,mBAAmB,MAAgC;AACvE,OAAM,cAAc,yBAAyB;AAE7C,MAAK,MAAM,QAAQ,MAAM;EACvB,MAAM,MAAM,UAAU;AACtB,gBAAc,IAAI;AAClB,UAAQ,IAAI,mCAAmC,MAAM;;;AAIzD,eAAsB,qBAAqB,aAA+C;AACxF,KAAI,EAAE,MAAM,WAAW,EAAE,UAEvB;CAEF,MAAM,uBAAuB,oBAAoB,aAAa,SAAS;AACvE,KAAI,gBAAgB,qBAClB,OAAM,IAAI,MAAM,wBAAwB,cAAc;AAGvD,EAAC,MAAM,SAAS,EAAE,IACjB,uBACA,MAAM,QAAQ,qBAAqB,GAAG,qBAAqB,KAAK,IAAI,GAAG,sBACvE;EACE,UAAU;EACV,MAAM;EACN,QAAQ;EACR,UAAU;EACX,CACF"}