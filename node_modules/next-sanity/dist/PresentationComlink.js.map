{"version":3,"file":"PresentationComlink.js","names":["controller: AbortController | undefined"],"sources":["../src/experimental/client-components/PresentationComlink.tsx"],"sourcesContent":["import type {ClientPerspective} from '@sanity/client'\nimport {createNode, createNodeMachine} from '@sanity/comlink'\nimport {setPerspectiveCookie} from 'next-sanity/live/server-actions'\nimport {\n  createCompatibilityActors,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@sanity/presentation-comlink'\nimport {useRouter} from 'next/navigation'\nimport {startTransition, useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {\n  setComlink,\n  setComlinkClientConfig,\n  setPerspective,\n  perspective,\n} from '../../live/hooks/context'\nimport {sanitizePerspective} from '../../live/utils'\n\nexport default function PresentationComlink(props: {\n  projectId: string\n  dataset: string\n  draftModeEnabled: boolean\n}): React.JSX.Element | null {\n  const {projectId, dataset, draftModeEnabled} = props\n  const router = useRouter()\n\n  useEffect(() => {\n    setComlinkClientConfig(projectId, dataset)\n  }, [dataset, projectId])\n\n  const handlePerspectiveChange = useEffectEvent(\n    (_perspective: ClientPerspective, signal: AbortSignal) => {\n      const nextPerspective = sanitizePerspective(_perspective, 'drafts')\n      if (draftModeEnabled && perspective.toString() !== nextPerspective.toString()) {\n        setPerspective(nextPerspective)\n        startTransition(() =>\n          setPerspectiveCookie(nextPerspective)\n            .then(() => {\n              if (signal.aborted) return\n              router.refresh()\n            })\n            .catch((reason) =>\n              console.error('Failed to set the preview perspective cookie', reason),\n            ),\n        )\n      }\n    },\n  )\n\n  useEffect(() => {\n    const comlink = createNode<LoaderNodeMsg, LoaderControllerMsg>(\n      {name: 'loaders', connectTo: 'presentation'},\n      createNodeMachine<LoaderNodeMsg, LoaderControllerMsg>().provide({\n        actors: createCompatibilityActors<LoaderNodeMsg>(),\n      }),\n    )\n\n    let controller: AbortController | undefined\n    comlink.on('loader/perspective', (data) => {\n      controller?.abort()\n      controller = new AbortController()\n      handlePerspectiveChange(data.perspective, controller.signal)\n    })\n\n    const stop = comlink.start()\n    setComlink(comlink)\n    return () => {\n      stop()\n    }\n  }, [])\n\n  return null\n}\n"],"mappings":";;;;;;;;AAmBA,SAAwB,oBAAoB,OAIf;CAC3B,MAAM,EAAC,WAAW,SAAS,qBAAoB;CAC/C,MAAM,SAAS,WAAW;AAE1B,iBAAgB;AACd,yBAAuB,WAAW,QAAQ;IACzC,CAAC,SAAS,UAAU,CAAC;CAExB,MAAM,0BAA0B,gBAC7B,cAAiC,WAAwB;EACxD,MAAM,kBAAkB,oBAAoB,cAAc,SAAS;AACnE,MAAI,oBAAoB,YAAY,UAAU,KAAK,gBAAgB,UAAU,EAAE;AAC7E,kBAAe,gBAAgB;AAC/B,yBACE,qBAAqB,gBAAgB,CAClC,WAAW;AACV,QAAI,OAAO,QAAS;AACpB,WAAO,SAAS;KAChB,CACD,OAAO,WACN,QAAQ,MAAM,gDAAgD,OAAO,CACtE,CACJ;;GAGN;AAED,iBAAgB;EACd,MAAM,UAAU,WACd;GAAC,MAAM;GAAW,WAAW;GAAe,EAC5C,mBAAuD,CAAC,QAAQ,EAC9D,QAAQ,2BAA0C,EACnD,CAAC,CACH;EAED,IAAIA;AACJ,UAAQ,GAAG,uBAAuB,SAAS;AACzC,eAAY,OAAO;AACnB,gBAAa,IAAI,iBAAiB;AAClC,2BAAwB,KAAK,aAAa,WAAW,OAAO;IAC5D;EAEF,MAAM,OAAO,QAAQ,OAAO;AAC5B,aAAW,QAAQ;AACnB,eAAa;AACX,SAAM;;IAEP,EAAE,CAAC;AAEN,QAAO"}