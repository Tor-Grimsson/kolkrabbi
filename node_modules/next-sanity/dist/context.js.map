{"version":3,"file":"context.js","names":["perspectiveListeners: Set<() => void>","perspective: DraftPerspective","environmentListeners: Set<() => void>","environment: DraftEnvironment","comlinkListeners: Set<() => void>","comlink: Node<LoaderNodeMsg, LoaderControllerMsg> | null","comlinkProjectId: string | null","comlinkDataset: string | null"],"sources":["../src/live/hooks/context.ts"],"sourcesContent":["import type {ClientPerspective} from '@sanity/client'\nimport {type Node} from '@sanity/comlink'\nimport {type LoaderControllerMsg, type LoaderNodeMsg} from '@sanity/presentation-comlink'\n\n/**\n * The Sanity Client perspective used when fetching data in Draft Mode, in the `sanityFetch` calls\n * used by React Server Components on the page. Note that some of them might set the `perspective` to a different value.\n * This value is what's used by default.\n * @public\n */\nexport type DraftPerspective = 'checking' | 'unknown' | ClientPerspective\n\n/** @internal */\nexport const perspectiveListeners: Set<() => void> = new Set()\n/** @internal */\nexport let perspective: DraftPerspective = 'checking'\n/** @internal */\nexport function setPerspective(nextPerspective: DraftPerspective): void {\n  if (perspective.toString() === nextPerspective.toString()) return\n  perspective = nextPerspective\n  for (const onPerspectiveChange of perspectiveListeners) {\n    onPerspectiveChange()\n  }\n}\n\n/**\n *\n * @public\n */\nexport type DraftEnvironment =\n  | 'checking'\n  | 'presentation-iframe'\n  | 'presentation-window'\n  | 'live'\n  | 'static'\n  | 'unknown'\n\n/** @internal */\nexport const environmentListeners: Set<() => void> = new Set()\n/** @internal */\nexport let environment: DraftEnvironment = 'checking'\n/** @internal */\nexport function setEnvironment(nextEnvironment: DraftEnvironment): void {\n  environment = nextEnvironment\n  for (const onEnvironmentChange of environmentListeners) {\n    onEnvironmentChange()\n  }\n}\n\n/** @internal */\nexport const comlinkListeners: Set<() => void> = new Set()\n/** @internal */\nexport let comlink: Node<LoaderNodeMsg, LoaderControllerMsg> | null = null\n/** @internal */\nexport let comlinkProjectId: string | null = null\n/** @internal */\nexport let comlinkDataset: string | null = null\n/** @internal */\nexport function setComlink(nextComlink: Node<LoaderNodeMsg, LoaderControllerMsg> | null): void {\n  comlink = nextComlink\n  for (const onComlinkChange of comlinkListeners) {\n    onComlinkChange()\n  }\n}\n/** @internal */\nexport function setComlinkClientConfig(\n  nextComlinkProjectId: string | null,\n  nextComlinkDataset: string | null,\n): void {\n  comlinkProjectId = nextComlinkProjectId\n  comlinkDataset = nextComlinkDataset\n  for (const onComlinkChange of comlinkListeners) {\n    onComlinkChange()\n  }\n}\n"],"mappings":";;AAaA,MAAaA,uCAAwC,IAAI,KAAK;AAE9D,IAAWC,cAAgC;AAE3C,SAAgB,eAAe,iBAAyC;AACtE,KAAI,YAAY,UAAU,KAAK,gBAAgB,UAAU,CAAE;AAC3D,eAAc;AACd,MAAK,MAAM,uBAAuB,qBAChC,sBAAqB;;AAiBzB,MAAaC,uCAAwC,IAAI,KAAK;AAE9D,IAAWC,cAAgC;AAE3C,SAAgB,eAAe,iBAAyC;AACtE,eAAc;AACd,MAAK,MAAM,uBAAuB,qBAChC,sBAAqB;;AAKzB,MAAaC,mCAAoC,IAAI,KAAK;AAE1D,IAAWC,UAA2D;AAEtE,IAAWC,mBAAkC;AAE7C,IAAWC,iBAAgC;AAE3C,SAAgB,WAAW,aAAoE;AAC7F,WAAU;AACV,MAAK,MAAM,mBAAmB,iBAC5B,kBAAiB;;AAIrB,SAAgB,uBACd,sBACA,oBACM;AACN,oBAAmB;AACnB,kBAAiB;AACjB,MAAK,MAAM,mBAAmB,iBAC5B,kBAAiB"}