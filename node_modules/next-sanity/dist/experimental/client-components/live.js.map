{"version":3,"file":"live.js","names":[],"sources":["../../../src/experimental/client-components/live.tsx"],"sourcesContent":["'use client'\n\nimport {\n  createClient,\n  type ClientPerspective,\n  type LiveEvent,\n  type LiveEventGoAway,\n  type SyncTag,\n} from '@sanity/client'\nimport {isMaybePresentation, isMaybePreviewWindow} from '@sanity/presentation-comlink'\nimport dynamic from 'next/dynamic'\nimport {useRouter} from 'next/navigation'\nimport {useEffect, useMemo, useRef, useState} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {setEnvironment, setPerspective} from '../../live/hooks/context'\nimport {isCorsOriginError} from '../../isCorsOriginError'\nimport type {SanityClientConfig} from '../types'\nimport {sanitizePerspective} from '../../live/utils'\nimport {PUBLISHED_SYNC_TAG_PREFIX, type DRAFT_SYNC_TAG_PREFIX} from '../constants'\n\nconst PresentationComlink = dynamic(() => import('./PresentationComlink'), {ssr: false})\nconst RefreshOnMount = dynamic(() => import('../../live/client-components/live/RefreshOnMount'), {\n  ssr: false,\n})\nconst RefreshOnFocus = dynamic(() => import('../../live/client-components/live/RefreshOnFocus'), {\n  ssr: false,\n})\nconst RefreshOnReconnect = dynamic(\n  () => import('../../live/client-components/live/RefreshOnReconnect'),\n  {ssr: false},\n)\n\n/**\n * @alpha CAUTION: This API does not follow semver and could have breaking changes in future minor releases.\n */\nexport interface SanityLiveProps {\n  config: SanityClientConfig\n  draftModeEnabled: boolean\n  refreshOnMount?: boolean\n  refreshOnFocus?: boolean\n  refreshOnReconnect?: boolean\n  requestTag: string | undefined\n  /**\n   * Handle errors from the Live Events subscription.\n   * By default it's reported using `console.error`, you can override this prop to handle it in your own way.\n   */\n  onError?: (error: unknown) => void\n  intervalOnGoAway?: number | false\n  onGoAway?: (event: LiveEventGoAway, intervalOnGoAway: number | false) => void\n  revalidateSyncTags: (\n    tags: `${typeof PUBLISHED_SYNC_TAG_PREFIX | typeof DRAFT_SYNC_TAG_PREFIX}${SyncTag}`[],\n  ) => Promise<void | 'refresh'>\n  resolveDraftModePerspective: () => Promise<ClientPerspective>\n}\n\nfunction handleError(error: unknown) {\n  /* eslint-disable no-console */\n  if (isCorsOriginError(error)) {\n    console.warn(\n      `Sanity Live is unable to connect to the Sanity API as the current origin - ${window.origin} - is not in the list of allowed CORS origins for this Sanity Project.`,\n      error.addOriginUrl && `Add it here:`,\n      error.addOriginUrl?.toString(),\n    )\n  } else {\n    console.error(error)\n  }\n  /* eslint-enable no-console */\n}\n\nfunction handleOnGoAway(event: LiveEventGoAway, intervalOnGoAway: number | false) {\n  /* eslint-disable no-console */\n  if (intervalOnGoAway) {\n    console.warn(\n      'Sanity Live connection closed, switching to long polling set to a interval of',\n      intervalOnGoAway / 1000,\n      'seconds and the server gave this reason:',\n      event.reason,\n    )\n  } else {\n    console.error(\n      'Sanity Live connection closed, automatic revalidation is disabled, the server gave this reason:',\n      event.reason,\n    )\n  }\n  /* eslint-enable no-console */\n}\n\n/**\n * @alpha CAUTION: This API does not follow semver and could have breaking changes in future minor releases.\n */\nexport default function SanityLive(props: SanityLiveProps): React.JSX.Element | null {\n  const {\n    config,\n    draftModeEnabled,\n    refreshOnMount = false,\n    refreshOnFocus = draftModeEnabled\n      ? false\n      : typeof window === 'undefined'\n        ? true\n        : window.self === window.top,\n    refreshOnReconnect = true,\n    intervalOnGoAway = 30_000,\n    requestTag = 'next-loader.live',\n    onError = handleError,\n    onGoAway = handleOnGoAway,\n    revalidateSyncTags,\n    resolveDraftModePerspective,\n  } = props\n  const {projectId, dataset, apiHost, apiVersion, useProjectHostname, token, requestTagPrefix} =\n    config\n\n  const client = useMemo(\n    () =>\n      createClient({\n        projectId,\n        dataset,\n        apiHost,\n        apiVersion,\n        useProjectHostname,\n        ignoreBrowserTokenWarning: true,\n        token,\n        useCdn: false,\n        requestTagPrefix,\n      }),\n    [apiHost, apiVersion, dataset, projectId, requestTagPrefix, token, useProjectHostname],\n  )\n  const [longPollingInterval, setLongPollingInterval] = useState<number | false>(false)\n  const [resolvedInitialPerspective, setResolvedInitialPerspective] = useState(false)\n\n  /**\n   * 1. Handle Live Events and call revalidateTag or router.refresh when needed\n   */\n  const router = useRouter()\n  const handleLiveEvent = useEffectEvent((event: LiveEvent) => {\n    if (process.env.NODE_ENV !== 'production' && event.type === 'welcome') {\n      // eslint-disable-next-line no-console\n      console.info(\n        'Sanity is live with',\n        token\n          ? 'automatic revalidation for draft content changes as well as published content'\n          : draftModeEnabled\n            ? 'automatic revalidation for only published content. Provide a `browserToken` to `defineLive` to support draft content outside of Presentation Tool.'\n            : 'automatic revalidation of published content',\n      )\n      // Disable long polling when welcome event is received, this is a no-op if long polling is already disabled\n      setLongPollingInterval(false)\n    } else if (event.type === 'message') {\n      revalidateSyncTags(\n        event.tags.map((tag: SyncTag) => `${PUBLISHED_SYNC_TAG_PREFIX}${tag}` as const),\n      ).then((result) => {\n        if (result === 'refresh') router.refresh()\n      })\n    } else if (event.type === 'restart' || event.type === 'reconnect') {\n      router.refresh()\n    } else if (event.type === 'goaway') {\n      onGoAway(event, intervalOnGoAway)\n      setLongPollingInterval(intervalOnGoAway)\n    }\n  })\n  // @TODO previous version that handle both published and draft events\n  // useEffect(() => {\n  //   const subscription = client.live.events({includeDrafts: !!token, tag: requestTag}).subscribe({\n  //     next: handleLiveEvent,\n  //     error: (err: unknown) => {\n  //       onError(err)\n  //     },\n  //   })\n  //   return () => subscription.unsubscribe()\n  // }, [client.live, onError, requestTag, token])\n  useEffect(() => {\n    const subscription = client.live.events({tag: requestTag}).subscribe({\n      next: handleLiveEvent,\n      error: (err: unknown) => {\n        onError(err)\n      },\n    })\n    return () => subscription.unsubscribe()\n  }, [client.live, onError, requestTag, token])\n\n  /**\n   * Handle live events for drafts differently, only use it to trigger refreshes, don't expire the cache\n   */\n  const handleLiveDraftEvent = useEffectEvent((event: LiveEvent) => {\n    if (event.type === 'message') {\n      // Just refresh, due to cache bypass in draft mode it'll fetch fresh content (though we wish cache worked as in production)\n      // @TODO if draft content is published, then this extra refresh is unnecessary, it's tricky to check since `event.id` are different on the two EventSource connections\n      router.refresh()\n    }\n  })\n  useEffect(() => {\n    if (!token) return\n    const subscription = client.live.events({includeDrafts: !!token, tag: requestTag}).subscribe({\n      next: handleLiveDraftEvent,\n      error: (err: unknown) => {\n        onError(err)\n      },\n    })\n    return () => subscription.unsubscribe()\n  }, [client.live, onError, requestTag, token])\n\n  /**\n   * 2. Notify what perspective we're in, when in Draft Mode\n   */\n  useEffect(() => {\n    if (resolvedInitialPerspective) return undefined\n\n    if (!draftModeEnabled) {\n      setResolvedInitialPerspective(true)\n      setPerspective('unknown')\n      return undefined\n    }\n\n    const controller = new AbortController()\n    resolveDraftModePerspective()\n      .then((perspective) => {\n        if (controller.signal.aborted) return\n        setResolvedInitialPerspective(true)\n        setPerspective(sanitizePerspective(perspective, 'drafts'))\n      })\n      .catch((err) => {\n        if (controller.signal.aborted) return\n        console.error('Failed to resolve draft mode perspective', err)\n        setResolvedInitialPerspective(true)\n        setPerspective('unknown')\n      })\n    return () => controller.abort()\n  }, [draftModeEnabled, resolveDraftModePerspective, resolvedInitialPerspective])\n\n  const [loadComlink, setLoadComlink] = useState(false)\n  /**\n   * 3. Notify what environment we're in, when in Draft Mode\n   */\n  useEffect(() => {\n    // If we might be in Presentation Tool, then skip detecting here as it's handled later\n    if (isMaybePresentation()) return\n\n    // If we're definitely not in Presentation Tool, then we can set the environment as stand-alone live preview\n    // if we have both a browser token, and draft mode is enabled\n    if (draftModeEnabled && token) {\n      setEnvironment('live')\n      return\n    }\n    // If we're in draft mode, but don't have a browser token, then we're in static mode\n    // which means that published content is still live, but draft changes likely need manual refresh\n    if (draftModeEnabled) {\n      setEnvironment('static')\n      return\n    }\n\n    // Fallback to `unknown` otherwise, as we simply don't know how it's setup\n    setEnvironment('unknown')\n    return\n  }, [draftModeEnabled, token])\n\n  /**\n   * 4. If Presentation Tool is detected, load up the comlink and integrate with it\n   */\n  useEffect(() => {\n    if (!isMaybePresentation()) return\n    const controller = new AbortController()\n    // Wait for a while to see if Presentation Tool is detected, before assuming the env to be stand-alone live preview\n    const timeout = setTimeout(() => setEnvironment('live'), 3_000)\n    window.addEventListener(\n      'message',\n      ({data}: MessageEvent<unknown>) => {\n        if (\n          data &&\n          typeof data === 'object' &&\n          'domain' in data &&\n          data.domain === 'sanity/channels' &&\n          'from' in data &&\n          data.from === 'presentation'\n        ) {\n          clearTimeout(timeout)\n          setEnvironment(isMaybePreviewWindow() ? 'presentation-window' : 'presentation-iframe')\n          setLoadComlink(true)\n          controller.abort()\n        }\n      },\n      {signal: controller.signal},\n    )\n    return () => {\n      clearTimeout(timeout)\n      controller.abort()\n    }\n  }, [])\n\n  /**\n   * 5. Warn if draft mode is being disabled\n   * @TODO move logic into PresentationComlink, or maybe VisualEditing?\n   */\n  const draftModeEnabledWarnRef = useRef<ReturnType<typeof setTimeout> | undefined>(undefined)\n  useEffect(() => {\n    if (!draftModeEnabled) return\n    clearTimeout(draftModeEnabledWarnRef.current)\n    return () => {\n      draftModeEnabledWarnRef.current = setTimeout(() => {\n        // eslint-disable-next-line no-console\n        console.warn('Sanity Live: Draft mode was enabled, but is now being disabled')\n      })\n    }\n  }, [draftModeEnabled])\n\n  /**\n   * 6. Handle switching to long polling when needed\n   */\n  useEffect(() => {\n    if (!longPollingInterval) return\n    const interval = setInterval(() => router.refresh(), longPollingInterval)\n    return () => clearInterval(interval)\n  }, [longPollingInterval, router])\n\n  return (\n    <>\n      {draftModeEnabled && loadComlink && resolvedInitialPerspective && (\n        <PresentationComlink\n          projectId={projectId!}\n          dataset={dataset!}\n          draftModeEnabled={draftModeEnabled}\n        />\n      )}\n      {!draftModeEnabled && refreshOnMount && <RefreshOnMount />}\n      {!draftModeEnabled && refreshOnFocus && <RefreshOnFocus />}\n      {!draftModeEnabled && refreshOnReconnect && <RefreshOnReconnect />}\n    </>\n  )\n}\n"],"mappings":"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"}