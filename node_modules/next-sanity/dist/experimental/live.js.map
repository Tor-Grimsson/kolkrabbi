{"version":3,"file":"live.js","names":["SanityLiveServerComponent: React.ComponentType<SanityLiveServerComponentProps>","SanityLiveServerComponent","resolveDraftModePerspective"],"sources":["../../src/experimental/live.tsx"],"sourcesContent":["// oxlint-disable-next-line no-unassigned-import\nimport 'server-only'\nimport {\n  createClient,\n  type ClientPerspective,\n  type ClientReturn,\n  type ContentSourceMap,\n  type LiveEventGoAway,\n  type QueryParams,\n  type SanityClient,\n  type SyncTag,\n} from 'next-sanity'\nimport {stegaEncodeSourceMap} from '@sanity/client/stega'\nimport SanityLiveClientComponent, {\n  type SanityLiveProps,\n} from 'next-sanity/experimental/client-components/live'\nimport {unstable_cacheTag as cacheTag, unstable_expireTag as expireTag} from 'next/cache'\nimport {draftMode, cookies} from 'next/headers'\nimport {preconnect} from 'react-dom'\nimport {perspectiveCookieName} from '@sanity/preview-url-secret/constants'\nimport {sanitizePerspective} from '../live/utils'\nimport type {SanityClientConfig} from './types'\nimport {DRAFT_SYNC_TAG_PREFIX, PUBLISHED_SYNC_TAG_PREFIX} from './constants'\n\n/**\n * @alpha CAUTION: This API does not follow semver and could have breaking changes in future minor releases.\n */\nexport async function resolvePerspectiveFromCookie({\n  cookies: jar,\n}: {\n  cookies: Awaited<ReturnType<typeof cookies>>\n}): Promise<Exclude<ClientPerspective, 'raw'>> {\n  return jar.has(perspectiveCookieName)\n    ? sanitizePerspective(jar.get(perspectiveCookieName)?.value, 'drafts')\n    : 'drafts'\n}\n\nasync function sanityCachedFetch<const QueryString extends string>(\n  config: SanityClientConfig,\n  {\n    query,\n    params = {},\n    perspective,\n    stega,\n    requestTag,\n    draftToken,\n    customCacheTags = [],\n  }: {\n    query: QueryString\n    params?: QueryParams\n    perspective: Exclude<ClientPerspective, 'raw'>\n    stega: boolean\n    requestTag: string\n    draftToken?: string | false | undefined\n    customCacheTags?: string[]\n  },\n): Promise<{\n  data: ClientReturn<QueryString, unknown>\n  sourceMap: ContentSourceMap | null\n  tags: string[]\n}> {\n  'use cache'\n\n  const client = createClient({...config, useCdn: true})\n  const useCdn = perspective === 'published'\n  /**\n   * The default cache profile isn't ideal for live content, as it has unnecessary time based background validation, as well as a too lazy client stale value\n   * https://github.com/vercel/next.js/blob/8dd358002baf4244c0b2e38b5bda496daf60dacb/packages/next/cache.d.ts#L14-L26\n   */\n  // cacheLife({\n  //   stale: Infinity,\n  //   revalidate: Infinity,\n  //   expire: Infinity,\n  // })\n\n  const {result, resultSourceMap, syncTags} = await client.fetch(query, params, {\n    filterResponse: false,\n    returnQuery: false,\n    perspective,\n    useCdn,\n    resultSourceMap: stega ? 'withKeyArraySelector' : undefined, // @TODO allow passing csm for non-stega use\n    cacheMode: useCdn ? 'noStale' : undefined,\n    tag: requestTag,\n    token: perspective === 'published' ? config.token : draftToken || config.token, // @TODO can pass undefined instead of config.token here?\n  })\n  const tags = [\n    ...customCacheTags,\n    ...(syncTags || []).map(\n      (tag) =>\n        `${perspective === 'published' ? PUBLISHED_SYNC_TAG_PREFIX : DRAFT_SYNC_TAG_PREFIX}${tag}`,\n    ),\n  ]\n  /**\n   * The tags used here, are expired later on in the `expireTags` Server Action with the `expireTag` function from `next/cache`\n   */\n  cacheTag(...tags)\n\n  return {data: result, sourceMap: resultSourceMap || null, tags}\n}\n\n/**\n * @alpha CAUTION: This API does not follow semver and could have breaking changes in future minor releases.\n */\nexport type DefinedSanityFetchType = <const QueryString extends string>(options: {\n  query: QueryString\n  params?: QueryParams | Promise<QueryParams>\n  perspective?: Exclude<ClientPerspective, 'raw'>\n  /**\n   * Enables stega encoding of the data, this is typically only used in draft mode.\n   * If `defineLive({..., stega: true})` is provided, then it defaults to `true` in Draft Mode.\n   * If `defineLive({..., stega: false})` then it defaults to `false`.\n   */\n  stega?: boolean\n  /**\n   * This request tag is used to identify the request when viewing request logs from your Sanity Content Lake.\n   * @see https://www.sanity.io/docs/reference-api-request-tags\n   * @defaultValue 'next-loader.fetch'\n   */\n  requestTag?: string\n  /**\n   * Custom cache tags that can be used with next's `revalidateTag` function for custom webhook on-demand revalidation.\n   */\n  tags?: string[]\n}) => Promise<{\n  data: ClientReturn<QueryString, unknown>\n  /**\n   * The Content Source Map can be used for custom setups like `encodeSourceMap` for `data-sanity` attributes, or `stegaEncodeSourceMap` for stega encoding in your own way.\n   * The Content Source Map is only fetched by default in draft mode, if `stega` is `true`. Otherwise your client configuration will need to have `resultSourceMap: 'withKeyArraySelector' | true`\n   */\n  sourceMap: ContentSourceMap | null\n  /**\n   * The perspective used to fetch the data, useful for debugging.\n   */\n  perspective: Exclude<ClientPerspective, 'raw'>\n  /**\n   * The cache tags used with `next/cache`, useful for debugging.\n   */\n  tags: string[]\n}>\n\n/**\n * @alpha CAUTION: This API does not follow semver and could have breaking changes in future minor releases.\n */\nexport interface DefinedSanityLiveProps {\n  /**\n   * Automatic refresh of RSC when the component <SanityLive /> is mounted.\n   * @defaultValue `false`\n   */\n  refreshOnMount?: boolean\n  /**\n   * Automatically refresh when window gets focused\n   * @defaultValue `false`\n   */\n  refreshOnFocus?: boolean\n  /**\n   * Automatically refresh when the browser regains a network connection (via navigator.onLine)\n   * @defaultValue `false`\n   */\n  refreshOnReconnect?: boolean\n  /**\n   * Automatically refresh on an interval when the Live Event API emits a `goaway` event, which indicates that the connection is rejected or closed.\n   * This typically happens if the connection limit is reached, or if the connection is idle for too long.\n   * To disable this long polling fallback behavior set `intervalOnGoAway` to `false` or `0`.\n   * You can also use `onGoAway` to handle the `goaway` event in your own way, and read the reason why the event was emitted.\n   * @defaultValue `30_000` 30 seconds interval\n   */\n  intervalOnGoAway?: number | false\n\n  /**\n   * This request tag is used to identify the request when viewing request logs from your Sanity Content Lake.\n   * @see https://www.sanity.io/docs/reference-api-request-tags\n   * @defaultValue 'next-loader.live'\n   */\n  requestTag?: string\n\n  /**\n   * Handle errors from the Live Events subscription.\n   * By default it's reported using `console.error`, you can override this prop to handle it in your own way.\n   */\n  onError?: (error: unknown) => void\n\n  /**\n   * Handle the `goaway` event if the connection is rejected/closed.\n   * `event.reason` will be a string of why the event was emitted, for example `'connection limit reached'`.\n   * When this happens the `<SanityLive />` will fallback to long polling with a default interval of 30 seconds, providing your own `onGoAway` handler does not change this behavior.\n   * If you want to disable long polling set `intervalOnGoAway` to `false` or `0`.\n   */\n  onGoAway?: (event: LiveEventGoAway, intervalOnGoAway: number | false) => void\n\n  /**\n   * Override how cache tags are invalidated, you need to pass a server action here.\n   * You can also pass a `use client` function here, and have `router.refresh()` be called if the promise resolves to `'refresh'`.\n   */\n  // @TODO remove, replace with onLiveEvent\n  revalidateSyncTags?: (\n    tags: `${typeof PUBLISHED_SYNC_TAG_PREFIX | typeof DRAFT_SYNC_TAG_PREFIX}${SyncTag}`[],\n  ) => Promise<void | 'refresh'>\n\n  // @TODO add\n  // decide how to handle a live event coming in\n  // onLiveEvent?: (event: LiveEvent, mode: 'production' | 'preview) => void\n\n  /**\n   * Control how the draft mode perspective is resolved, by default it resolves from the `sanity-preview-perspective` cookie.\n   */\n  resolveDraftModePerspective?: () => Promise<ClientPerspective>\n}\n\n/**\n * @alpha CAUTION: This API does not follow semver and could have breaking changes in future minor releases.\n */\nexport interface DefineSanityLiveOptions {\n  /**\n   * Required for `sanityFetch` and `SanityLive` to work\n   */\n  client: SanityClient\n  /**\n   * Optional. If provided then the token needs to have permissions to query documents with `drafts.` prefixes in order for `perspective: 'drafts'` to work.\n   * This token is not shared with the browser.\n   */\n  serverToken?: string | false\n  /**\n   * Optional. This token is shared with the browser, and should only have access to query published documents.\n   * It is used to setup a `Live Draft Content` EventSource connection, and enables live previewing drafts stand-alone, outside of Presentation Tool.\n   */\n  browserToken?: string | false\n  /**\n   * Optional. Include stega encoding when draft mode is enabled.\n   *  @defaultValue `true` if the client configuration has the `stega.studioUrl` property set, otherwise `false`\n   */\n  stega?: boolean\n}\n\n/**\n * @alpha CAUTION: This API does not follow semver and could have breaking changes in future minor releases.\n */\nexport function defineLive(config: DefineSanityLiveOptions): {\n  /**\n   * Use this function to fetch data from Sanity in your React Server Components.\n   */\n  sanityFetch: DefinedSanityFetchType\n  /**\n   * Render this in your root layout.tsx to make your page revalidate on new content live, automatically.\n   */\n  SanityLive: React.ComponentType<DefinedSanityLiveProps>\n} {\n  const {client: _client, serverToken, browserToken} = config\n\n  if (!_client) {\n    throw new Error('`client` is required for `defineLive` to function')\n  }\n\n  if (process.env.NODE_ENV !== 'production' && !serverToken && serverToken !== false) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'No `serverToken` provided to `defineLive`. This means that only published content will be fetched and respond to live events. You can silence this warning by setting `serverToken: false`.',\n    )\n  }\n\n  if (process.env.NODE_ENV !== 'production' && !browserToken && browserToken !== false) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'No `browserToken` provided to `defineLive`. This means that live previewing drafts will only work when using the Presentation Tool in your Sanity Studio. To support live previewing drafts stand-alone, provide a `browserToken`. It is shared with the browser so it should only have Viewer rights or lower. You can silence this warning by setting `browserToken: false`.',\n    )\n  }\n\n  const client = _client.withConfig({allowReconfigure: false, useCdn: false})\n  const {token: originalToken, stega: stegaConfig} = client.config()\n  const studioUrlDefined = typeof client.config().stega.studioUrl !== 'undefined'\n  const {stega: stegaEnabled = typeof client.config().stega.studioUrl !== 'undefined'} = config\n\n  const sanityFetch: DefinedSanityFetchType = async function sanityFetch<\n    const QueryString extends string,\n  >({\n    query,\n    params = {},\n    stega: _stega,\n    tags: customCacheTags = [],\n    perspective: _perspective,\n    requestTag = 'next-loader.fetch',\n  }: {\n    query: QueryString\n    params?: QueryParams | Promise<QueryParams>\n    stega?: boolean\n    tags?: string[]\n    perspective?: Exclude<ClientPerspective, 'raw'>\n    requestTag?: string\n  }) {\n    const stega = _stega ?? (stegaEnabled && studioUrlDefined && (await draftMode()).isEnabled)\n    const perspective = _perspective ?? ((await draftMode()).isEnabled ? 'drafts' : 'published')\n\n    const {apiHost, apiVersion, useProjectHostname, dataset, projectId, requestTagPrefix} =\n      client.config()\n    const {\n      data: _data,\n      sourceMap,\n      tags,\n    } = await sanityCachedFetch(\n      {\n        apiHost,\n        apiVersion,\n        useProjectHostname,\n        dataset,\n        projectId,\n        requestTagPrefix,\n        token: originalToken,\n      },\n      {\n        query,\n        params: await params,\n        perspective,\n        stega,\n        requestTag,\n        draftToken: serverToken,\n        customCacheTags,\n      },\n    )\n\n    const data =\n      stega && sourceMap\n        ? stegaEncodeSourceMap(_data, sourceMap, {...stegaConfig, enabled: true})\n        : _data\n\n    return {data, sourceMap, tags, perspective}\n  }\n\n  const SanityLive: React.ComponentType<DefinedSanityLiveProps> = function SanityLive(props) {\n    const {\n      // perspective,\n      refreshOnMount = false,\n      refreshOnFocus = false,\n      refreshOnReconnect = false,\n      requestTag,\n      onError,\n      onGoAway,\n      intervalOnGoAway,\n      revalidateSyncTags = expireTags,\n    } = props\n\n    const {projectId, dataset, apiHost, apiVersion, useProjectHostname, requestTagPrefix} =\n      client.config()\n    const {origin} = new URL(client.getUrl('', false))\n\n    // Preconnect to the Live Event API origin early, as the Sanity API is almost always on a different origin than the app\n    preconnect(origin)\n\n    return (\n      <SanityLiveServerComponent\n        config={{projectId, dataset, apiHost, apiVersion, useProjectHostname, requestTagPrefix}}\n        requestTag={requestTag}\n        browserToken={browserToken}\n        // origin={origin}\n        refreshOnMount={refreshOnMount}\n        refreshOnFocus={refreshOnFocus}\n        refreshOnReconnect={refreshOnReconnect}\n        onError={onError}\n        onGoAway={onGoAway}\n        intervalOnGoAway={intervalOnGoAway}\n        revalidateSyncTags={revalidateSyncTags}\n        resolveDraftModePerspective={\n          props.resolveDraftModePerspective ?? resolveDraftModePerspective\n        }\n      />\n    )\n  }\n\n  return {sanityFetch, SanityLive}\n}\n\ninterface SanityLiveServerComponentProps\n  extends Omit<SanityLiveProps, 'draftModeEnabled' | 'token' | 'draftModePerspective'> {\n  browserToken: string | false | undefined\n  // origin: string\n  // perspective?: Exclude<ClientPerspective, 'raw'>\n}\n\nconst SanityLiveServerComponent: React.ComponentType<SanityLiveServerComponentProps> =\n  async function SanityLiveServerComponent(props) {\n    'use cache'\n    // @TODO should this be 'max' instead?, or configured by changing the default cache profile?\n    // cacheLife({\n    //   stale: Infinity,\n    //   revalidate: Infinity,\n    //   expire: Infinity,\n    // })\n    const {\n      config,\n      requestTag,\n      intervalOnGoAway,\n      onError,\n      onGoAway,\n      refreshOnFocus,\n      refreshOnMount,\n      refreshOnReconnect,\n      revalidateSyncTags,\n      browserToken,\n      // origin,\n      // perspective,\n      resolveDraftModePerspective,\n    } = props\n\n    const {isEnabled: isDraftModeEnabled} = await draftMode()\n\n    // // Preconnect to the Live Event API origin early, as the Sanity API is almost always on a different origin than the app\n    // preconnect(origin)\n\n    return (\n      <SanityLiveClientComponent\n        config={{\n          ...config,\n          token: typeof browserToken === 'string' && isDraftModeEnabled ? browserToken : undefined,\n        }}\n        requestTag={requestTag}\n        draftModeEnabled={isDraftModeEnabled}\n        refreshOnMount={refreshOnMount}\n        refreshOnFocus={refreshOnFocus}\n        refreshOnReconnect={refreshOnReconnect}\n        onError={onError}\n        onGoAway={onGoAway}\n        intervalOnGoAway={intervalOnGoAway}\n        revalidateSyncTags={revalidateSyncTags}\n        resolveDraftModePerspective={resolveDraftModePerspective}\n      />\n    )\n  }\n\n// @TODO expose parseTags function that returns the correct array of tags\n// we already have s1: prefixes, but they could change\n// use sp: for prod, sd: for draft, keep em short\nasync function expireTags(_tags: unknown): Promise<void> {\n  'use server'\n  // @TODO Draft Mode bypasses cache anyway so we don't bother with expiring tags for draft content\n  // const isDraftMode = (await draftMode()).isEnabled\n  // const tags = _tags.map((tag) => `${isDraftMode ? 'drafts' : 'sanity'}:${tag}`)\n  if (!Array.isArray(_tags)) {\n    console.warn('<SanityLive /> `expireTags` called with non-array tags', _tags)\n    return undefined\n  }\n  const tags = _tags.filter(\n    (tag) => typeof tag === 'string' && tag.startsWith(PUBLISHED_SYNC_TAG_PREFIX),\n  )\n  if (!tags.length) {\n    console.warn('<SanityLive /> `expireTags` called with no valid tags', _tags)\n    return undefined\n  }\n  expireTag(...tags)\n  console.log(`<SanityLive /> expired tags: ${tags.join(', ')}`)\n}\n\nasync function resolveDraftModePerspective(): Promise<ClientPerspective> {\n  'use server'\n  if ((await draftMode()).isEnabled) {\n    const jar = await cookies()\n    return resolvePerspectiveFromCookie({cookies: jar})\n  }\n  return 'published'\n}\n\n/**\n * Add more stuff:\n * - sanityFetchMetadata: sanityFetch({query, params, stega: false, perspective: 'auto'})\n * - sanityFetchStaticParams: sanityFetch({query, params, stega: false, perspective: 'published', cacheMode: undefined})\n * - sanityFetchCached: sanityFetch({query, params, stega: 'opt-in',perspective: 'opt-in'}) useful for 'use cache' components, no unexpected magic, maybe this will be `sanityFetch` instead\n * - sanityFetchDynamic: sanityFetch({query, params, stega: 'auto', perspective: 'auto'}) just like sanityFetch of old, since `sanityFetch` will likely become opt-in\n */\n"],"mappings":"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"}